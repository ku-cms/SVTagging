


infile='<tree_association.txt file generated by the predict.py script>'

from DeepJetCore.evaluation import makePlots_async, makeEffPlots_async, testDescriptor


#makePlots_async(infile,      #input file or file list
#                ['test'],    #legend names (needs to be list)
#                'jet_pt',    #variable to plot
#                'jet_pt>40', #cut to apply
#                'green',     #line color and style (e.g. 'red,dashed')
#                'test.pdf',  #output file (pdf)
#                'xaxis',     #xaxisname
#                'yaxis',     #yaxisname
#                False)       #normalise

#infile='output_post_test_fraction/tree_association.txt'
#makePlots_async(infile,      #input file or file list
#                name_list = ['b SVs', 'other SVs'],    #legend names (needs to be list)
#                variables = 'prob_isB',    #variable to plot
#                cuts = ['!Evt_isMatchedToJet && Evt_isB', '!Evt_isMatchedToJet && Evt_isOther'], #cut to apply
#                colours = 'auto',     #line color and style (e.g. 'red,dashed')
#                outpdffile = 'prob_isB.pdf',  #output file (pdf)
#                xaxis = 'prob isB',     #xaxisname
#                yaxis = 'SVs',     #yaxisname
#                normalized = True)       #normalise
isLightO = 'Evt_isUD || Evt_isS || Evt_isG || Evt_isOther || Evt_isMatchOther'
isLight = 'Evt_isUD || Evt_isS || Evt_isG'
infileList=[
            #['trk_initial_train/output_post_test_trk_initial_03_18_2020/tree_association.txt',
            # 'trk_nano4_train/output_post_test_trk_nano4_03_30_2020/tree_association.txt'],
             [#'trk_nano4_train/output_post_test_trk_nano4_03_30_2020/tree_association.txt',
           #'trk_6var_train/output_post_test_trk_6var_04_07_2020/tree_association.txt',
           #'trk_nano_train/output_post_test_trk_nano_03_18_2020/tree_association.txt'],
           'trk_nano_d3ds_train/output_post_test_trk_nano_d3ds_07_11_2020/tree_association.txt'],
           'trk_nano_d3ds_train/output_post_test_trk_nano_old_07_11_2020/tree_association.txt'],
           #['trk_6var_train/output_post_test_trk_6var_04_07_2020/tree_association.txt',
           #'trk_7var_train/output_post_test_trk_7var_04_07_2020/tree_association.txt'],
           #['trk_7var_train/output_post_test_trk_7var_04_07_2020/tree_association.txt',
           #'trk_nano_train/output_post_test_trk_nano_03_18_2020/tree_association.txt'],
           #['trk_nano_train/output_post_test_trk_nano_03_18_2020/tree_association.txt',
           #'trk_more_train/output_post_test_trk_more_03_25_2020/tree_association.txt'],
           #  ['trk_nano4_train/output_post_test_trk_nano4_03_30_2020/tree_association.txt',
           #'trk_nano_train/output_post_test_trk_nano_03_18_2020/tree_association.txt']
           ]
ref_dict = {
    'initial': '4var',
    'nano4':   'nano4',
    '6var' :   'nano6',
    '7var' :   'nano7',
    'nano' :   'nano8',
    'more' :   '9var',
    'd3ds' :   'nano8plus',
    'old'  :   'nano8'
           }
for infile in infileList:
#    makeEffPlots_async(infile,      #input file or file list
#                    name_list = ['b '+ref_dict[infile[2].split('_')[6]], 'b '+ref_dict[infile[1].split('_')[6]], 'b '+ref_dict[infile[0].split('_')[6]]],    #legend names (needs to be list)
#                    variables = 'Evt_pt',    #variable to plot
#                    cutsnum = ['0.prob_isB>0.35', '1.prob_isB>0.35', '2.prob_isB>0.35'], #cut numerator
#                    cutsden = ['!Evt_isMatchedToJet && Evt_isB+Evt_isGB', '!Evt_isMatchedToJet && Evt_isB+Evt_isGB', '!Evt_isMatchedToJet && Evt_isB+Evt_isGB'], #cut denomenator
#                    colours = ['auto'],     #line color and style (e.g. 'red,dashed')
#                    outpdffile = 'B_Eff_sv_pt_0p35_'+ref_dict[infile[0].split('_')[6]]+'_'+ref_dict[infile[1].split('_')[6]]+'_'+ref_dict[infile[2].split('_')[6]]+'.pdf',  #output file (pdf)
#                    xaxis = 'SV p_{T}',     #xaxisname
#                    yaxis = 'SV eff',     #yaxisname
#                    minimum = 0, 
#                    maximum = 0.7,
#                    Xmin = 0,
#                    Xmax = 20.,
#                    nbins = 100,
#                    rebinfactor = 1)       #normalise
#    makeEffPlots_async(infile,      #input file or file list
#                    name_list = ['c '+ref_dict[infile[2].split('_')[6]], 'c '+ref_dict[infile[1].split('_')[6]], 'c '+ref_dict[infile[0].split('_')[6]]],    #legend names (needs to be list)
#                    variables = 'Evt_pt',    #variable to plot
#                    cutsnum = ['0.prob_isB>0.35', '1.prob_isB>0.35', '2.prob_isB>0.35'], #cut numerator
#                    cutsden = ['!Evt_isMatchedToJet && Evt_isC', '!Evt_isMatchedToJet && Evt_isC', '!Evt_isMatchedToJet && Evt_isC'], #cut denomenator
#                    colours = ['auto'],     #line color and style (e.g. 'red,dashed')
#                    outpdffile = 'C_Eff_sv_pt_0p35_'+ref_dict[infile[0].split('_')[6]]+'_'+ref_dict[infile[1].split('_')[6]]+'_'+ref_dict[infile[2].split('_')[6]]+'.pdf',  #output file (pdf)
#                    xaxis = 'SV p_{T}',     #xaxisname
#                    yaxis = 'SV eff',     #yaxisname
#                    minimum = 0, 
#                    maximum = 0.5,
#                    Xmin = 0,
#                    Xmax = 20.,
#                    nbins = 100,
#                    rebinfactor = 1)       #normalise
#    makeEffPlots_async(infile,      #input file or file list
#                    name_list = ['light '+ref_dict[infile[2].split('_')[6]], 'light '+ref_dict[infile[1].split('_')[6]], 'light '+ref_dict[infile[0].split('_')[6]]],    #legend names (needs to be list)
#                    variables = 'Evt_pt',    #variable to plot
#                    cutsnum = ['0.prob_isB>0.35', '1.prob_isB>0.35', '2.prob_isB>0.35'], #cut numerator
#                    cutsden = ['!Evt_isMatchedToJet && Evt_isUD+Evt_isS+Evt_isG+Evt_isMatchOther+Evt_isOther', '!Evt_isMatchedToJet && Evt_isUD+Evt_isS+Evt_isG+Evt_isMatchOther+Evt_isOther', '!Evt_isMatchedToJet && Evt_isUD+Evt_isS+Evt_isG+Evt_isMatchOther+Evt_isOther'], #cut denomenator
#                    colours = ['auto'],     #line color and style (e.g. 'red,dashed')
#                    outpdffile = 'Eff_sv_pt_0p35_'+ref_dict[infile[0].split('_')[6]]+'_'+ref_dict[infile[1].split('_')[6]]+'_'+ref_dict[infile[2].split('_')[6]]+'.pdf',  #output file (pdf)
#                    xaxis = 'SV p_{T}',     #xaxisname
#                    yaxis = 'SV eff',     #yaxisname
#                    minimum = 0.01, 
#                    maximum = 0.5,
#                    Xmin = 0,
#                    Xmax = 20.,
#                    nbins = 100,
#                    SetLogY = True,
#                    rebinfactor = 1)       #normalise
#    makeEffPlots_async(infile,      #input file or file list
#                    name_list = ['b '+ref_dict[infile[2].split('_')[6]], 'b '+ref_dict[infile[1].split('_')[6]], 'b '+ref_dict[infile[0].split('_')[6]]],    #legend names (needs to be list)
#                    variables = 'Evt_eta',    #variable to plot
#                    cutsnum = ['0.prob_isB>0.35', '1.prob_isB>0.35', '2.prob_isB>0.35'], #cut numerator
#                    cutsden = ['!Evt_isMatchedToJet && Evt_isB+Evt_isGB', '!Evt_isMatchedToJet && Evt_isB+Evt_isGB', '!Evt_isMatchedToJet && Evt_isB+Evt_isGB'], #cut denomenator
#                    colours = ['auto'],     #line color and style (e.g. 'red,dashed')
#                    outpdffile = 'B_Eff_sv_eta_0p35_'+ref_dict[infile[0].split('_')[6]]+'_'+ref_dict[infile[1].split('_')[6]]+'_'+ref_dict[infile[2].split('_')[6]]+'.pdf',  #output file (pdf)
#                    xaxis = 'SV #eta',     #xaxisname
#                    yaxis = 'SV eff',     #yaxisname
#                    minimum = 0, 
#                    maximum = 0.7,
#                    Xmin = -3.14,
#                    Xmax = 3.14,
#                    nbins = 100,
#                    rebinfactor = 1)       #normalise
#    makeEffPlots_async(infile,      #input file or file list
#                    name_list = ['c '+ref_dict[infile[2].split('_')[6]], 'c '+ref_dict[infile[1].split('_')[6]], 'c '+ref_dict[infile[0].split('_')[6]]],    #legend names (needs to be list)
#                    variables = 'Evt_eta',    #variable to plot
#                    cutsnum = ['0.prob_isB>0.35', '1.prob_isB>0.35', '2.prob_isB>0.35'], #cut numerator
#                    cutsden = ['!Evt_isMatchedToJet && Evt_isC', '!Evt_isMatchedToJet && Evt_isC', '!Evt_isMatchedToJet && Evt_isC'], #cut denomenator
#                    colours = ['auto'],     #line color and style (e.g. 'red,dashed')
#                    outpdffile = 'C_Eff_sv_eta_0p35_'+ref_dict[infile[0].split('_')[6]]+'_'+ref_dict[infile[1].split('_')[6]]+'_'+ref_dict[infile[2].split('_')[6]]+'.pdf',  #output file (pdf)
#                    xaxis = 'SV #eta',     #xaxisname
#                    yaxis = 'SV eff',     #yaxisname
#                    minimum = 0, 
#                    maximum = 0.5,
#                    Xmin = -3.14,
#                    Xmax = 3.14,
#                    nbins = 100,
#                    rebinfactor = 1)       #normalise
#    makeEffPlots_async(infile,      #input file or file list
#                    name_list = ['light '+ref_dict[infile[2].split('_')[6]], 'light '+ref_dict[infile[1].split('_')[6]], 'light '+ref_dict[infile[0].split('_')[6]]],    #legend names (needs to be list)
#                    variables = 'Evt_eta',    #variable to plot
#                    cutsnum = ['0.prob_isB>0.35', '1.prob_isB>0.35', '2.prob_isB>0.35'], #cut numerator
#                    cutsden = ['!Evt_isMatchedToJet && Evt_isUD+Evt_isS+Evt_isG+Evt_isMatchOther+Evt_isOther', '!Evt_isMatchedToJet && Evt_isUD+Evt_isS+Evt_isG+Evt_isMatchOther+Evt_isOther', '!Evt_isMatchedToJet && Evt_isUD+Evt_isS+Evt_isG+Evt_isMatchOther+Evt_isOther'], #cut denomenator
#                    colours = ['auto'],     #line color and style (e.g. 'red,dashed')
#                    outpdffile = 'Eff_sv_eta_0p35_'+ref_dict[infile[0].split('_')[6]]+'_'+ref_dict[infile[1].split('_')[6]]+'_'+ref_dict[infile[2].split('_')[6]]+'.pdf',  #output file (pdf)
#                    xaxis = 'SV #eta',     #xaxisname
#                    yaxis = 'SV eff',     #yaxisname
#                    minimum = 0.01, 
#                    maximum = 0.5,
#                    Xmin = -3.14,
#                    Xmax = 3.14,
#                    nbins = 100,
#                    SetLogY = True,
#                    rebinfactor = 1)       #normalise
    makeEffPlots_async(infile,      #input file or file list
                    name_list = ['b '+ref_dict[infile[1].split('_')[8]], 'b '+ref_dict[infile[0].split('_')[8]]],    #legend names (needs to be list)
                    variables = 'Evt_eta',    #variable to plot
                    cutsnum = ['0.prob_isB>0.3', '1.prob_isB>0.3'], #cut numerator
                    cutsden = ['!Evt_isMatchedToJet && Evt_isB+Evt_isGB', '!Evt_isMatchedToJet && Evt_isB+Evt_isGB'], #cut denomenator
                    colours = ['darkblue', 'red'],     #line color and style (e.g. 'red,dashed')
                    outpdffile = 'Eff_sv_eta_0p35_'+ref_dict[infile[0].split('_')[8]]+'_'+ref_dict[infile[1].split('_')[8]]+'.pdf',  #output file (pdf)
                    xaxis = 'SV #eta',     #xaxisname
                    yaxis = 'SV eff',     #yaxisname
                    minimum = 0, 
                    maximum = 1.0,
                    Xmin = -3,
                    Xmax = 3.,
                    nbins = 100,
                    rebinfactor = 2)       #normalise
    makeEffPlots_async(infile,      #input file or file list
                    name_list = ['b '+ref_dict[infile[1].split('_')[8]], 'b '+ref_dict[infile[0].split('_')[8]]],    #legend names (needs to be list)
                    variables = 'Evt_pt',    #variable to plot
                    cutsnum = ['0.prob_isB>0.3', '1.prob_isB>0.3'], #cut numerator
                    cutsden = ['!Evt_isMatchedToJet && Evt_isB+Evt_isGB', '!Evt_isMatchedToJet && Evt_isB+Evt_isGB'], #cut denomenator
                    colours = ['darkblue', 'red'],     #line color and style (e.g. 'red,dashed')
                    outpdffile = 'Eff_sv_eta_0p35_'+ref_dict[infile[0].split('_')[8]]+'_'+ref_dict[infile[1].split('_')[8]]+'.pdf',  #output file (pdf)
                    xaxis = 'SV p_{T}',     #xaxisname
                    yaxis = 'SV eff',     #yaxisname
                    minimum = 0, 
                    maximum = 1.0,
                    Xmin = 0.,
                    Xmax = 20.,
                    nbins = 100,
                    rebinfactor = 2)       #normalise
#    makePlots_async(infile,      #input file or file list
#                    name_list = ['b '+ref_dict[infile[1].split('_')[6]], 'b '+ref_dict[infile[0].split('_')[6]]],    #legend names (needs to be list)
#                    variables = ['0.prob_isB', '1.prob_isB'],    #variable to plot
#                    cuts = ['!Evt_isMatchedToJet && Evt_isB+Evt_isGB', '!Evt_isMatchedToJet && Evt_isB+Evt_isGB'], #cut to apply
#                    colours = ['darkblue', 'red'],     #line color and style (e.g. 'red,dashed')
#                    outpdffile = 'prob_isB_'+ref_dict[infile[0].split('_')[6]]+'_'+ref_dict[infile[1].split('_')[6]]+'.pdf',  #output file (pdf)
#                    xaxis = 'prob isB',     #xaxisname
#                    yaxis = 'SVs',     #yaxisname
#                    #nbins = 100,
#                    #xmin = 0,
#                    #xmax = 1.0,
#                    normalized = True)       #normalise
